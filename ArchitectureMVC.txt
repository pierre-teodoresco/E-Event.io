Modèles :
    - classe Utilisateurs :
        Paramètres :
            > String role = Public //le rôle de l'utilisateur
            > private String login //le login de l'utilisateur
            > private String password //le mot de passe de l'utilisateur
            > bool ResetPassword = 1 //un booléan tenant compte si  l'utilisateur doit redefinir son mot de passe

        //getters et setters de password / login
        
        [défini arbitrairement par un administrateur dans un premier temps] 
        puis doit le changer à la première connexion; 
        peut soumettre une demande de réinitialisation de mot de passe et 
        un administrateur lui envoye par mail un mdp aléatoire, puis l utilisateur doit le reéfinir)

        Méthodes :
            //Cette méthode va être appelé que quand l'utilisateur clique sur le bouton reset password
            > void PasswordResetRequest() //méthode demandant une réinitialisation de mot de passe
                //administrateur envoye un mail avec un mot de passe aléatoire
                ResetPassword = 1; //Quand l'utilisateur se reconnecteras, il devras redefinir son mot de passe
            
            //Cette méthode va être appelé chaque fois avant le lancement d'une connexion
            > void PasswordReset() //méthode demandant à l'utilisateur de redefinir son mot de passe
                if (ResetPassword == 1)
                    input (newPassword1); //pas la rédaction exacte mais l'idée c'est que l'utilisateur entre 2 fois son nouveau mot de passe pour éviter les erreurs de tape
                    input (newPassword2);
                    if (newPassword1 == newPassword2)
                        SetPassword(newPassword1);

            = sous classe Administrateur :
                Méthodes :
                    //Cette méthode va etre appellé suite à un voeux de l'administrateur ou une recevation d'une password request
                    > InitialisationUtilisateur //Cette fonction va initialiser et créer un utilisateur ou alors reinitialiser le mot de passe
                        //Est-ce qu'on envoye le mail via l'application ou en dehors ? 
                        //Je pense en dehors donc cette fonction va juste rappeller ca à l'administrateur
                        //Un mail avec les identifiant ou alors le nouveau mot de passe va etre envoyé à l'utilisateur

                    //Cette méthode va être appelé quand un administrateur souhaite enlever, changer ou mettre un rôle à un autre utilisateur
                    > RoleAttribution (String roles, User user) //méthode changeant le rôle d'une personne
                        if (user.role != Administrateur) //On vérifie que l'utilisateur n'est pas un Administrateur pour éviter des trolls etc
                            user.role = roles; //on attribue le nouveau role à l'utilisateur

                    //Cette méthode va être appelé quand l'administrateur veux créer une campagne
                    > SetCampagne(Date dateDeb, Date dateFin, unsigned points)
                        Campaign = new Campagne(dateDeb, dateFin, points);

            = sous classe Jury :
                Méthodes :
                    //Cette méthode va être appellé en fin de campagne
                    > DelibererEvenements () //Cette méthode va permettre au jury de voter sur l'évènement à garder et déliberer dessus
                        //notification des jury pour qu'ils sachent qu'ils peuvent déliberer ?
                        //Delibération par vote ou par discussion ? 
                        //choisie n évènements à garder (dans le texte) => ca veut dire qu'ils peuvent choisirs combiend d'évènements à garder ou on leur donne ? Je pense premier cas
                    
            = sous classe Organisateur :
                Attributs :
                    > Evenement evenement = null; //L'évenement que l'organisateur peut choisir de mettre et qui seras reinitialisé à null (?) après chaque campagne

                Méthodes : 
                    //Cette méthode va être appellé quand l'organosateur souhaite créer son évènement
                    > void CréerEvenement(..., unsigned points) //méthode permettant de créer leur propre évènement
                        if (evenement == null) //On vérifie que l'organisateur n'as pas encore crée un évènement
                            evenement = new Evenement(..., unsigned points); //Si c'est le premier évènement de l'organisateur, on crée un nouvel évènement
                        else
                            print ("Vous avez déjà crée un évènement pour cette campagne. Vous pouvez le modifier"); //Sinon on lui répond un message d'erreur
                    
                    //Cette méthode va être appellé en début de campagne ? Ou après les jurys aient pris leur décision ?
                    > void resetEvenement () //Elle va supprimer l'évènement de la dernière campagne
                        evenement = null; //Pas la bonne formulation mais faut reset l'évènement

                    //Cette méthode va être appellé quand l'organisateur souhaite modifier son évènement
                    > void modifierEvenement () //Elle permet de redéfinir l'évènement

            = sous classe Donateur :
                Attributs :
                    > int Points;

                Méthodes :
                    //Cette méthode va être appellé en début de campagne
                    > void AttribuerPoints (points) //Elle attribue les points à dépenser pour chaque Donateur
                        Points = points;
                    
                    //Cette méthode va être appellé une fois la campagne fini
                    > void ResetPoints () //Elle remet les points à 0
                        Points = 0;

                    //Cette méthode va être appellé chaque fois que le donateur effectue un don
                    > void Commenter () //Elle permet de laisser un commentaire sous chaque évènement après un don
                        ...
            = sous classe Public :
                Méthode :

     - classe Evenement  
        Attributs :
            > list <Evenement> Everetenu // la liste des evenements retenu par le jury              
        
        - classe  Idee:
            Attributs :
                > String description //Dont l'idée parle
                > List<Commentaires>
                > List <String> contenusupp //contenu déblocable avec des points
                > List <int> points //Les points qu'il faut pour débloquer le contenu supp
                > int pointsrecu //Les points que l'idée aie reçu
                > photo illustration //L'illustration de l'idée
        
            Méthodes :
                //Cette méthode va être appellé quand on veut modifier la description
                > void ModifDescr () //modifie la description tant que l'idée n'aie pas reçu de points
                    if (pointsrecu == 0)
                        ...
                    else 
                        cout << "L'idée ne peut plus être modifié"
    
    - classe Commentaire :
        > User utilisateur;
        > String description;

    - classe Campagne
        Attributs :
            > date dateDeb;
            > date dateFin;
            > string name;
            > int points;
            > list <Evenement> evenements;



    - Points convertis en "moyens" de soutiens des idées d'évènements 

Vues : 
    - page acceuil :
        > liste d'évènements par ordre du plus de points au moins de points
        > liste pour le jury par ordre décroissant de points avec tous les idées montré ayant au moins k points
        > liste évènements gardé

    - page descriptive des idées (consultable que pendant une campagne d'idéation d'évènements)
        > contenu idée, points dépensées dans cette idées, contenu déblocables supplementaires

    - Back office :
        > administrateurs
            gestion utilisateurs & campagnes d'idéations
        > organisateurs
            que accessible après commencement campagne
        > jury
            Accessible que une fois la campagne fini
            Choix des idées d'événements à organiser / mettre en œuvre.


Controleurs :
    - ControleurPrincip
        - ControleurUser
        - ControleurEvenement
        - ControleurPage


Base de données principale dans le Noyau qui est appellé par les différents Modèles

Pour les modèles : à voir si on fait un modèle de rôles ou pas, vu qu'ils amènent à faire des choses en plus on pourras y appeller des méthodes ou alors on met ces méthodes directement dans la base de données (ce serait moins visible mais marcherais aussi)

???
L'entité partenaire est garante des points, et donc met à disposition l'enveloppe total de 
points à travers un Web Service qui est interrogé par l'application lors de la définition d'une 
campagne (le comportement fonctionnel sera simulé à l'aide d'un web service fourni, à 
installer sur le même serveur qui héberge l'application Web).
???



